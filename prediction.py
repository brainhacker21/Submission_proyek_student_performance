{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # Proyek Akhir: Menyelesaikan Permasalahan Human Resources\n\n# %% [markdown]\n# - Nama: Auric\n# - Email: stevenauric@gmail.com\n# - Id Dicoding: auric_21\n\n# %% [markdown]\n# ## Persiapan\n\n# %% [markdown]\n# ### Menyiapkan library yang dibutuhkan\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:19.093700Z\",\"iopub.execute_input\":\"2025-04-20T10:41:19.094636Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.107284Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:19.094593Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.106328Z\"}}\n# Library yang sering dipakai\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Library untuk fungsi database\nfrom sqlalchemy import create_engine\n\n# Library untuk modelling\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n# %% [markdown]\n# ### Menyiapkan data yang akan diguankan\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.109267Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.109855Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.190411Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.109816Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.189186Z\"}}\ndf = pd.read_csv(\"https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/employee/employee_data.csv\")\ndf.head(5)\n\n# %% [markdown]\n# ## Data Understanding\n\n# %% [markdown] {\"execution\":{\"iopub.status.busy\":\"2025-04-17T02:30:35.655092Z\",\"iopub.execute_input\":\"2025-04-17T02:30:35.655420Z\",\"iopub.status.idle\":\"2025-04-17T02:30:35.672655Z\",\"shell.execute_reply.started\":\"2025-04-17T02:30:35.655397Z\",\"shell.execute_reply\":\"2025-04-17T02:30:35.671424Z\"}}\n# # Employee Data\n# \n# The data contains demographic details, work-related metrics and attrition flag.\n# \n# * **EmployeeId** - Employee Identifier\n# * **Attrition** - Did the employee attrition? (0=no, 1=yes)\n# * **Age** - Age of the employee\n# * **BusinessTravel** - Travel commitments for the job\n# * **DailyRate** - Daily salary\n# * **Department** - Employee Department\n# * **DistanceFromHome** - Distance from work to home (in km)\n# * **Education** - 1-Below College, 2-College, 3-Bachelor, 4-Master,5-Doctor\n# * **EducationField** - Field of Education\n# * **EnvironmentSatisfaction** - 1-Low, 2-Medium, 3-High, 4-Very High\n# * **Gender** - Employee's gender\n# * **HourlyRate** - Hourly salary\n# * **JobInvolvement** - 1-Low, 2-Medium, 3-High, 4-Very High\n# * **JobLevel** - Level of job (1 to 5)\n# * **JobRole** - Job Roles\n# * **JobSatisfaction** - 1-Low, 2-Medium, 3-High, 4-Very High\n# * **MaritalStatus** - Marital Status\n# * **MonthlyIncome** - Monthly salary\n# * **MonthlyRate** - Mounthly rate\n# * **NumCompaniesWorked** - Number of companies worked at\n# * **Over18** - Over 18 years of age?\n# * **OverTime** - Overtime?\n# * **PercentSalaryHike** - The percentage increase in salary last year\n# * **PerformanceRating** - 1-Low, 2-Good, 3-Excellent, 4-Outstanding\n# * **RelationshipSatisfaction** - 1-Low, 2-Medium, 3-High, 4-Very High\n# * **StandardHours** - Standard Hours\n# * **StockOptionLevel** - Stock Option Level\n# * **TotalWorkingYears** - Total years worked\n# * **TrainingTimesLastYear** - Number of training attended last year\n# * **WorkLifeBalance** - 1-Low, 2-Good, 3-Excellent, 4-Outstanding\n# * **YearsAtCompany** - Years at Company\n# * **YearsInCurrentRole** - Years in the current role\n# * **YearsSinceLastPromotion** - Years since the last promotion\n# * **YearsWithCurrManager** - Years with the current manager\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.191248Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.191517Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.206480Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.191493Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.205368Z\"}}\n# Mengecek info dataset\ndf.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.207279Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.207578Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.228956Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.207546Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.227964Z\"}}\n# Mengecek missing value\ndf.isna().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.231913Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.232285Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.254292Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.232252Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.253231Z\"}}\n# Mengecek duplikat data\ndf.duplicated().sum()\n\n# %% [markdown]\n# ## Data Preparation / Preprocessing\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.255285Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.255617Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.273846Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.255578Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.272403Z\"}}\n# Menghapus missing value\ndf.dropna(inplace=True)\n\ndf.isna().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.274884Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.275264Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.298544Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.275223Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.297454Z\"}}\ndf.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.299560Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.299850Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.326091Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.299826Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.325068Z\"}}\n# Mengubah tipe data yang tidak sesuai pada kolom data\ncategory_column = ['Attrition', \n                   'Education', \n                   'EnvironmentSatisfaction', \n                   'JobInvolvement', \n                   'JobLevel', \n                  'JobSatisfaction', \n                   'PerformanceRating', \n                   'RelationshipSatisfaction', \n                   'StockOptionLevel', \n                   'WorkLifeBalance']\n\ndf[category_column] = df[category_column].astype(str)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.327158Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.327409Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.355306Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.327390Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.353954Z\"}}\n# Periksa kembali untuk tipe data pada kolom data saat ini setelah diubah\ndf.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.356595Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.356937Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.387695Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.356903Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.386312Z\"}}\n# Untuk tampilkan dataset setelah persiapan data\ndf.head().T\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.388786Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.389170Z\",\"iopub.status.idle\":\"2025-04-20T10:41:21.452524Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.389138Z\",\"shell.execute_reply\":\"2025-04-20T10:41:21.451454Z\"}}\n# Untuk memeriksa hasil deskripsi dataset\ndf.describe()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:21.453636Z\",\"iopub.execute_input\":\"2025-04-20T10:41:21.453987Z\",\"iopub.status.idle\":\"2025-04-20T10:41:27.067176Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:21.453951Z\",\"shell.execute_reply\":\"2025-04-20T10:41:27.066160Z\"}}\n# Distribusi fitur numerik\nnum_features = df.select_dtypes(include=[np.number])\nplt.figure(figsize=(15, 50))\nfor i, column in enumerate(num_features.columns, 1):\n    plt.subplot(10, 2, i)\n    sns.histplot(df[column], bins=50, kde=True, color='blue')\n    plt.title(f'Distribusi {column}')\nplt.tight_layout()\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:27.068183Z\",\"iopub.execute_input\":\"2025-04-20T10:41:27.068479Z\",\"iopub.status.idle\":\"2025-04-20T10:41:29.803476Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:27.068454Z\",\"shell.execute_reply\":\"2025-04-20T10:41:29.802334Z\"}}\n# Distribusi fitur kategorikal\ncat_features = df.select_dtypes(include=[object])\nplt.figure(figsize=(15, 50))\nfor i, column in enumerate(cat_features.columns, 1):\n    plt.subplot(10, 2, i)\n    sns.countplot(y=df[column], palette='viridis')\n    plt.title(f'Distribusi {column}')\nplt.tight_layout()\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:29.806664Z\",\"iopub.execute_input\":\"2025-04-20T10:41:29.807023Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.612590Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:29.806993Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.611334Z\"}}\n# Heatmap korelasi untuk fitur numerik\nplt.figure(figsize=(12, 10))\ncorrelation_matrix = num_features.corr()\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\nplt.title('Heatmap Korelasi')\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.614028Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.614452Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.628688Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.614416Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.627648Z\"}}\n# Untuk memeriksa nilai unik\ndf.nunique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.629702Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.629992Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.644660Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.629972Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.643495Z\"}}\n# Menghapus kolom jika hanya memiliki satu nilai\ndf_cat = df.copy()\ndf_cat.drop(columns=['StandardHours', 'Over18', 'EmployeeCount'], inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.645704Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.646086Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.663149Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.646051Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.662182Z\"}}\ndf_cat.nunique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.664135Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.664405Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.693264Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.664384Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.692466Z\"}}\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\n# Buat instance LabelEncoder\nlabel_encoder = LabelEncoder()\n \n# List kolom kategorikal yang perlu di-encode\ncategorical_columns = df_cat.select_dtypes(include=[\"object\"])\n \n# Encode kolom kategorikal\nfor column in categorical_columns:\n    df_cat[column] = label_encoder.fit_transform(df_cat[column])\n \n# Tampilkan DataFrame untuk memastikan encoding telah diterapkan\ndf_cat.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.694195Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.694487Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.764889Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.694463Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.763745Z\"}}\ndf_cat.describe()\n\n# %% [markdown]\n# ## Modeling\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.766257Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.766563Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.782163Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.766535Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.780718Z\"}}\ndf_cat.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.782973Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.783333Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.831648Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.783307Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.830250Z\"}}\ndf_cat.drop(['EmployeeId'], axis=1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.833472Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.833807Z\",\"iopub.status.idle\":\"2025-04-20T10:41:30.857171Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.833780Z\",\"shell.execute_reply\":\"2025-04-20T10:41:30.855604Z\"}}\n# Buat instance MinMaxScaler\nscaler = MinMaxScaler()\n \n# Normalisasi semua kolom numerik\nnumeric_columns = df_cat.columns\ndf_cat[numeric_columns] = scaler.fit_transform(df_cat[numeric_columns])\n \n# Pisahkan fitur (X) dan target (y)\nX = df_cat.drop(columns=['Attrition'])\ny = df_cat['Attrition']\n \n# Split data menjadi set pelatihan dan set uji\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Tampilkan bentuk set pelatihan dan set uji untuk memastikan split\nprint(f\"Training set shape: X_train={X_train.shape}, y_train={y_train.shape}\")\nprint(f\"Test set shape: X_test={X_test.shape}, y_test={y_test.shape}\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:30.858313Z\",\"iopub.execute_input\":\"2025-04-20T10:41:30.858625Z\",\"iopub.status.idle\":\"2025-04-20T10:41:31.188580Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:30.858592Z\",\"shell.execute_reply\":\"2025-04-20T10:41:31.187356Z\"}}\n# Bagian 1: Pelatihan Model\n# Definisikan setiap klasifikasi secara terpisah\nknn = KNeighborsClassifier().fit(X_train, y_train)\ndt = DecisionTreeClassifier().fit(X_train, y_train)\nrf = RandomForestClassifier().fit(X_train, y_train)\nsvm = SVC().fit(X_train, y_train)\nnb = GaussianNB().fit(X_train, y_train)\n \nprint(\"Model training selesai.\")\n\n# %% [markdown]\n# ## Evaluation\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:31.189790Z\",\"iopub.execute_input\":\"2025-04-20T10:41:31.190328Z\",\"iopub.status.idle\":\"2025-04-20T10:41:31.197202Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:31.190290Z\",\"shell.execute_reply\":\"2025-04-20T10:41:31.195840Z\"}}\n# Fungsi untuk mengevaluasi dan mengembalikan hasil sebagai kamus\ndef evaluate_model(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    cm = confusion_matrix(y_test, y_pred)\n    tn, fp, fn, tp = cm.ravel()\n    results = {\n        'Confusion Matrix': cm,\n        'True Positive (TP)': tp,\n        'False Positive (FP)': fp,\n        'False Negative (FN)': fn,\n        'True Negative (TN)': tn,\n        'Accuracy': accuracy_score(y_test, y_pred),\n        'Precision': precision_score(y_test, y_pred),\n        'Recall': recall_score(y_test, y_pred),\n        'F1-Score': f1_score(y_test, y_pred)\n    }\n    return results\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:31.198290Z\",\"iopub.execute_input\":\"2025-04-20T10:41:31.198615Z\",\"iopub.status.idle\":\"2025-04-20T10:41:31.338823Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:31.198569Z\",\"shell.execute_reply\":\"2025-04-20T10:41:31.337904Z\"}}\n# Mengevaluasi setiap model dan mengumpulkan hasilnya\nresults = {\n    'K-Nearest Neighbors (KNN)': evaluate_model(knn, X_test, y_test),\n    'Decision Tree (DT)': evaluate_model(dt, X_test, y_test),\n    'Random Forest (RF)': evaluate_model(rf, X_test, y_test),\n    'Support Vector Machine (SVM)': evaluate_model(svm, X_test, y_test),\n    'Naive Bayes (NB)': evaluate_model(nb, X_test, y_test)\n}\n \n# Buat DataFrame untuk meringkas hasil\nsummary_df = pd.DataFrame(columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1-Score'])\n \n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:31.339981Z\",\"iopub.execute_input\":\"2025-04-20T10:41:31.340349Z\",\"iopub.status.idle\":\"2025-04-20T10:41:31.350771Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:31.340325Z\",\"shell.execute_reply\":\"2025-04-20T10:41:31.349732Z\"}}\n# Isi DataFrame dengan hasil\nrows = []\nfor model_name, metrics in results.items():\n    rows.append({\n        'Model': model_name,\n        'Accuracy': metrics['Accuracy'],\n        'Precision': metrics['Precision'],\n        'Recall': metrics['Recall'],\n        'F1-Score': metrics['F1-Score']\n    })\n \n# Konversi daftar kamus ke DataFrame\nsummary_df = pd.DataFrame(rows)\n \n# Tampilkan DataFrame\nprint(summary_df)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:31.351826Z\",\"iopub.execute_input\":\"2025-04-20T10:41:31.352240Z\",\"iopub.status.idle\":\"2025-04-20T10:41:31.408741Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:31.352215Z\",\"shell.execute_reply\":\"2025-04-20T10:41:31.407795Z\"}}\nimport joblib\n \n# Menyimpan model ke dalam file\njoblib.dump(rf, 'rf_model.joblib')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-20T10:41:31.409725Z\",\"iopub.execute_input\":\"2025-04-20T10:41:31.410759Z\",\"iopub.status.idle\":\"2025-04-20T10:41:36.743846Z\",\"shell.execute_reply.started\":\"2025-04-20T10:41:31.410722Z\",\"shell.execute_reply\":\"2025-04-20T10:41:36.742943Z\"}}\nfrom sqlalchemy import create_engine\n \nURL = \"postgresql://postgres.zwnbxcaeqrgvrwicwjrt:qXg1oUaAjmFE93oN@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres\"\nengine = create_engine(URL)\ndf.to_sql('employee', engine)","metadata":{"_uuid":"79c43f64-55bc-4e02-9020-8fdf72297e50","_cell_guid":"66c2b6f5-7e47-4178-9c51-5252dfb58a70","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}